#!/usr/bin/env ruby

require 'rdvr'

unless ARGV.length >= 1
  puts "Usage: rdvr-control <command>\n"
  exit
end

case ARGV[0]
  when 'help'
    puts "Valid commands:\n"
    puts "\tlist   - List all scheduled shows\n"
    puts "\tadd    - Schedule a show\n"
    puts "\tremove - Remove a show schedule\n"
    puts "\tedit   - Edit a show schedule\n"
    puts "\tinfo   - Get details about a specific show\n"
    exit
  when 'list'
    Show.all.each do |s|
      next_airing = s.start
      while(next_airing < Time.now)
        next_airing = next_airing + 604800
      end if s.weekly and next_airing
      if s.weekly
        puts "(#{s.id}) '#{s.title}' by '#{s.artist}' airs #{next_airing.strftime("%A")}s at #{next_airing.strftime("%I:%M %p")} for #{s.duration} minute(s). Next airing is #{next_airing.strftime("%B %d, %Y")}."
      elsif next_airing
        puts "(#{s.id}) - '#{s.title}' by '#{s.artist}' #{next_airing < Time.now ? 'aired' : 'airs'} #{next_airing.strftime("%A %B %d, %Y")} at #{next_airing.strftime("%I:%M %p")} for #{s.duration} minute(s)."
      else
        puts "(#{s.id}) - '#{s.title}' by '#{s.artist}'."
      end
    end
    exit
  when 'add'
    s = Show.new
    print "Title (e.g. The Dusty Show): "
    STDOUT.flush
    s.title = STDIN.gets.chomp
    print "Artist (e.g. Clay Pigeon): "
    STDOUT.flush
    s.artist = STDIN.gets.chomp
    print "Start (e.g. 2013-11-26 22:00:00): "
    STDOUT.flush
    s.start = STDIN.gets.chomp
    print "Duration (in minutes e.g. 90): "
    STDOUT.flush
    s.duration = STDIN.gets.chomp
    print "Weekly? (e.g. t/f): "
    STDOUT.flush
    s.weekly = STDIN.gets.chomp
    print "Host (e.g. kdvs.org): "
    STDOUT.flush
    s.host = STDIN.gets.chomp
    print "Port (e.g. 8000): "
    STDOUT.flush
    s.port = STDIN.gets.chomp
    print "URL (e.g. /kdvs128): "
    STDOUT.flush
    s.url = STDIN.gets.chomp
    s.save
    puts "Saved with ID #{s.id}"

    Rdvr::update_crontab
  when 'remove'
    if ARGV.length != 2
      puts "Need to specify a show ID, e.g. rdvr-control remove 5"
      exit
    end
    show_id = ARGV[1]
    s = Show.find_by_id(show_id)
    if s
      s.destroy
      Rdvr::update_crontab
      puts "Removed show ##{show_id}, '#{s.title}'."
    else
      puts "Could not find a show with ID #{show_id}."
      exit
    end
  when 'info'
    if ARGV.length != 2
      puts "Need to specify a show ID, e.g. rdvr-control info 10"
      exit
    end
    show_id = ARGV[1]
    s = Show.find_by_id(show_id)
    if s
      puts "\tTitle      : " + s.title
      puts "\tArtist     : " + s.artist
      puts "\tDescription: " + s.description
      puts "\tGenre      : " + s.genre
      puts "\tWeekly?    : " + s.weekly
      puts "\tStart      : " + s.start
      puts "\tDuration   : " + s.duration
      puts "\tHost       : " + s.host
      puts "\tPort       : " + s.port
      puts "\tURL        : " + s.url
    else
      puts "Could not find a show with ID #{show_id}."
      exit
    end
  when 'edit'

  else
    puts "Unkown command #{ARGV[0]}\n"
    exit
end

